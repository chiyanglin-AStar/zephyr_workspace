wget https://developer.arm.com/-/media/Files/downloads/gnu-rm/10.3-2021.10/gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2

tar xjf gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2

chmod -R -w ${HOME}/opt/gcc-arm-none-eabi-10.3-2021.10

./gcc-arm-none-eabi-10.3-2021.10/bin/arm-none-eabi-gcc -v

export GCCARMEMB_TOOLCHAIN_PATH=~/opt/gcc-arm-none-eabi-10.3-2021.10

export ZEPHYR_TOOLCHAIN_VARIANT=gnuarmemb

pip3 install  -r scripts/requirements.txt

source zephyr-env.sh

sudo apt-get install cmake ninja-build dfu-util doxygen qemu device-tree-compiler python3 gperf


cd samples/hello_world/

mkdir build && cd build

cmake -GNinja -DBOARD=arduino_due ..

or 

cmake -GNinja -DBOARD=ast1060 ..


## instructions from 
https://docs.zephyrproject.org/latest/develop/getting_started/index.html

wget https://apt.kitware.com/kitware-archive.sh
sudo bash kitware-archive.sh


sudo apt install --no-install-recommends git cmake ninja-build gperf ccache dfu-util device-tree-compiler wget python3-dev python3-pip python3-setuptools python3-tk python3-wheel xz-utils file make gcc gcc-multilib g++-multilib libsdl2-dev libmagic1


## Install west, and make sure ~/.local/bin is on your PATH environment variable:

pip3 install --user -U west
echo 'export PATH=~/.local/bin:"$PATH"' >> ~/.bashrc
source ~/.bashrc
## Get the Zephyr source code:

west init ./zephyrproject
cd ./zephyrproject

## following for memnual to run 
west update
## Export a Zephyr CMake package. This allows CMake to automatically load boilerplate code required for building Zephyr applications.

west zephyr-export

## Zephyrâ€™s scripts/requirements.txt file declares additional Python dependencies. Install them with pip3.

pip3 install -r ./zephyr/scripts/requirements.txt

# Download and verify the latest Zephyr SDK bundle:

cd ~
wget https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.15.2/zephyr-sdk-0.15.2_linux-x86_64.tar.gz
wget -O - https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.15.2/sha256.sum | shasum --check --ignore-missing
## If your host architecture is 64-bit ARM (for example, Raspberry Pi), replace x86_64 with aarch64 in order to download the 64-bit ARM Linux SDK.

## Extract the Zephyr SDK bundle archive:

tar xvf zephyr-sdk-0.15.2_linux-x86_64.tar.gz

### Note

#### It is recommended to extract the Zephyr SDK bundle at one of the following locations:

    $HOME

    $HOME/.local

    $HOME/.local/opt

    $HOME/bin

    /opt

    /usr/local

## The Zephyr SDK bundle archive contains the zephyr-sdk-0.15.2 directory and, when extracted under $HOME, the resulting installation path will be $HOME/zephyr-sdk-0.15.2.

## Run the Zephyr SDK bundle setup script:

cd zephyr-sdk-0.15.2
cd zephyr-sdk-0.15.2/

./setup.sh
### Note

### You only need to run the setup script once after extracting the Zephyr SDK bundle.

You must rerun the setup script if you relocate the Zephyr SDK bundle directory after the initial setup.

Install udev rules, which allow you to flash most Zephyr boards as a regular user:

sudo cp ./zephyr-sdk-0.15.2/sysroots/x86_64-pokysdk-linux/usr/share/openocd/contrib/60-openocd.rules /etc/udev/rules.d
sudo udevadm control --reload

## Build the Blinky Sample

cd ./zephyr
west build -p always -b <your-board-name> samples/basic/blinky

west build -p always -b ast1030_evb  samples/hello_world

west build -p always -b ast1030_evb  samples/basic/minimal/

west build -p always -b qemu_x86_64  samples/basic/minimal/
